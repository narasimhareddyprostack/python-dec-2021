About Python
Road Map - Learning Road Map 

What is Python?
python - general purpose High Level Programing Language.
Developed By - Van Rossum - 1990.

First programming language for beginners.

OOP Language  - Java, C++[Python]  
Script Programing Language - Javascript, VB, perl,[Python]
functional Programing Language - C language
modular modular programming language - Modula-3

-Van Rossum - copies all good features.

Features of Pyton
1.Dynamic Typed
2.Simple and easy to learn
3.Open source and Freeware 
4.Platform Independent 
5.Portability(AWS-->Azure/GCP)
6.OOP - (Abstraction, Ecapsulation, Inheritance, Poly)
7.Python Embedded
  We can use python programming in any other languages.
  
8.Community Support/Extensive Libraries

Required Software 
Python 3
IDE - Integrated Dev Env (Thonny, Pycharm).



Python Editor
1) IDLE - coming along with Python installation
	   integrated Development Learning Env 
2)VS Code 
3)Thonny
4)PyCharm 
5)Notepad++


Identifier Rules:
---------------------
1.a to Z / A to Z (Alphabet symbols)
2.Identifier should not start with digits 
3.Underscore(_) , If identifier start with (_) -it indicate private 
4.Identifier are case sensitive 
5.We cant use reserved/keywords as identifiers.
6.Special symbols are not allowed

What is Keywords?

Python is simple and easy to Learn?


['False', 'None', 'True', 'and', 'as', 'assert', 
'async', 'await', 'break', 'class', 'continue', 
'def', 'del', 'elif', 'else', 'except', 
'finally', 'for', 'from', 'global', 'if', 
'import', 'in', 'is', 'lambda', 'nonlocal', 
'not', 'or', 'pass', 'raise', 'return', 'try', 
'while', 'with', 'yield']

Python is Dynamically Typed Programing Language.
we are not required to specify the data type explictilty.

based on the provided value, type will be assigned.

Data Types in Pyton 
-------------------
int 
bool
float 
str 

bytes
bytearray
range

list
tuple
dict
set

frozenset
None 


Python fundamental data types.
------------------------------
int 
float 
bool
str 

In Python contains several built-in functions 
print()
type() - to check the type of variable.
id() - address of object - JVM print inter



int Data Type:
a = 101

we can represent int values in the following ways 

1.decimal form
2.binary form 
3.octal form   (0 to 7)
4.HexaDecimal Form (0 to 9 + A to F)


1.Decimal Form(base-10)
----------------------------
base-10 means (0 to 9 ) 
Its default number system.
Allowed digits are 0 to 9 

2.Binary



Base conversion built-in functions.
bin()
hex()
oct()

float Data Types
------------------

Type Casting
-------------

int()
float()
str()
bool()
complex()

===============================
Python built-in funciton 
-------------------------
print()
id() 
type()

Type casting built-in functions 
---------------------------------
int()
bool()
complex()
str()
float()

bin() 
hex()
oct()

============================================
Python Data Types (13+) 

int : 
float 
bool
str 

complex - scientific application and Electrical Engineering

10+5j


bytes  
bytes represents group of  byte numbers just like array


size = [38,40,42,44] // In JS we called array 
b = bytes(x)


bytearray 
#what is bytearray?
bytearray is extactly same as bytes except that its elemetns we can modify

bytes  and bytearray?

bytes are immutable 
bytearray is mutable.

range 

list  - mutable 
tuple - immutable
set 
dict 

frozenset 
None 

================================
list Data types:
If we want to represent a group of values a single entity where insertion order required.

1.duplicate are allowed 
2.heterogeneous elemetns are allowed 
3.incr/decr - growable nature 
4.inserion order is preserved
5.[] 
6.Mutable object

Tuple data Types
==================
exactly same as list data type except - tuple is immutable.
we cant change the values.


set :
=================
If we want to present a group of values a single entity 
with out duplicate and where order is not imp, then we go for set.

1.insertion order is not preserved
2.duplicate are not allowed
3.heterogeneous objects are allowed 
4.growable in nature 
5.index concept is not applicable
6.Set is mutable object.

set vs frozenset
set - is mutable
frozenset - is immutable 


None?
====================================
Type             
int            - immutable 
float          - immutable 
complex        - immutable
bool           - immutable 
str            - immutable 
bytes          - immutable
bytearray      - mutable 
 
range          - immutable 
list []        - mutable( growable in nature)
set   {}       - mutable
tuple ()      - immutable
dict  {}      - mutable
frozenset     - immutable
None          - immutable



a = 100
a = 200 

Pyton Operators:
====================

Ternary Operator 

Special Operator

Identity Operatos 
is 
is not
Membership Operator
in     - Return True if the given object present in the specified collection.
not in - Return True if the given object not present in the specified collection.



Input and print Statement

Reading dynamic input from keyboard:

a = input("Plese Enter Value:")



=====================================
if-elif-else (if else ladder)





break 
we can use break statement/keyword inside loops(for and while)
to break loop based on condition.

for i in range(1,10):
print(i)



continue:
we can use continue statement/keyword to skip the current iteration and continue next iteration.



pass - statement :
we can define empty block with pass keyboard.

pass 
a)It is empty block
b)null state 
c)won't do anything


for value in sequence: 
   pass 
   
  
i=0
while i<=10:
   pass
   i =i +1 

we can use loops  to repeat code execution.
For loop : iterate every item in the sequence 

while loop: until condition false , iterate group of statement .

How to exit from the loop?
by using break statement 

how to skip the current iteration?
using continue statement. 
======================================

List Data Type 

create Read 

How to Read List , list elements 
Iterating list using while and for loop .

List built-in function 
len() - funciton
size = ['s','m','l']
print(len(size))
len()  - return the number of elemens in the list.

count() -return the number of occurances of item in the list 
index() -return the index of first occurance of specified item

size = ['s','m','l','m','m']
print(size.index('m'))


Note:If the specified element not present in the list then we will get ValueError: 'x' is not in list

Better before using index() method we have to check whether item present in the list of not.

with help of membership operator in
print('s' in size)

size = ['s','m','l','m','m']
print(size.index('x'))
print('s' in size)


count() - -return the number of occurances of item in the list 


updating list 
=============
append() - to add element at the end of the list 
insert() - insert the element @ specifed index position.
extend() 

deleting list element 
remove()
pop()



extend() - To add all items of one list to anoter list 

list1  = [1,2,3,4]
list2 =[5,6,7,8]
list1.extend(list2) #list 2 will be added to list1
print(list1)
print(list2)


append() and insert() - adding the element
extend() - add list to another list 

remove() function:
we can use this function, to remove the specifed item form list.

If the item present multiple times , only first occurance will be removed.


reverse() - reverse() function - used to reverse ordering the list .

 
sort() - sort the elements.


number -  Ascending order  
string -  Alphabetical order 

Note: To use sort() function, compusary list should contain only homogenous elemtns 
other wise will get Error,
TypeError: '<' not supported between instances of 'str' and 'int'


clone of list of object 
---------------------
copy() function 
by using [:] slice operator 


len() 
count()
index()

append() 
insert()
extend()

remove()
pop() 

copy()

To Ordering list elements 
reverse()
sort()
--------------------------------
list 
tuple 
set - intro
dict 


Write a program to display unique vowels in given word?
heeeeello  - 2 
a e i o u 

count = 0
word = "Hello"
for char in word:
    if char in ['a','e','i','o','u']:
	   count  =count+1 

print(count)



count = []
word = "Helloou"
for char in word:
    if char in ['a','e','i','o','u']:
        if char not in count:
            count.append(char)
	   

print(count)
print("No of unique vowels:", len(count))

WAP to print unique vowels in present in given word using while loop.

====================================
List 
Mathematical Operator for list Objects

+
a = [1,2,3]
b = [4,5,6]
c = a+b 

print(c)
	  
	  
	  a = [1,2,3]
b = [4,5,6]
c = a+b 

print(c)
#To use + operator compulsory both arg should be list object.
#otherwise we will Type Error


* - Repetition operator:
We can use repetition operator * , to repeat list specified number of time. 

 
Membership operator 
in operator 
not in operator

size = [38,40,42,44]

print(40 in size) # true 

clear() funciton 
We can use clear function to remove all elments of list.

size = ['s','m','l']
print('xl' not in size) # true

size.clear()
print(size)


==================================
Tupe Data Type 
Tuple is exactly same as list except mutability.

List is mutable 
Tuple is immutable.
Once we create a tuple object, we cant perfrom perform
any changes in the object.

- If you want to represent group element where insertion order required 
where allowed duplicate 

Heterogeneous object are allowed .

How to crete tuple ?
How to to read tuple and tuple elements?

size1 = 38,40,42,44
size = (38,40,42,44)
print(type(size))
print(type(size1))

# parenthesis is optional
a = 10   # int 
b = (10,) # single valued tuple
print(type(a))
print(type(b))

If you want to represent single valued tuple, 
compulsory the element should end with comma,

Creation of tuple 
=================

By using tuple() function.

size = []  #list 
newSize = tuple(size)
print(type(newSize))


size = (10,20,30,40,50)
print(size[0])
for s in size:
    print(s)
	
	
by using slice operator:
size = (10,20,30,40,50)
#        0  1 2 3  4
print(size[0])
for s in size:
    print(s)
    
print(size[2:5])


tuple is - immutable 

 t[0] = 100
TypeError: 'tuple' object does not support item assignment

Important functions
====================
len() - to return number of elmetns in tuple 
count() - to return no of occurances of given element 

index()  - to return first occurance of  given element
sorted() - we can sort tuple elment 

min()
max() 

t1 = (4,54,43,89,23,323)
t2 = sorted(t1)
print(t2)

#sorted() - to sort elements based default sort order
# is natural sort order 

t1 = (4,54,43,89,23,323)
t2 = sorted(t1,reverse=True)
print(t2)  #[323, 89, 54, 43, 23, 4]


t1 = (4,54,43,89,23,323)
t2 = sorted(t1,reverse=True)
print(t2)  #[323, 89, 54, 43, 23, 4]

#sorted() - to sort elements based default sort order
# is natural sort order

print(min(t1))
print(max(t1))

min() and max() - functions:
------------------------------------

Set 
---
If we want represent group of unique values as one entity we should go for set.

Duplicates are not allowed 
indexing and slicing is not possible.
Insertion order not preserved. But can sort the element.
Hetrogeneous object allowed 

Set is mutable object. once we create set object we can perform any changes.

we are representing - {} 

- union ,intersection,difference, - mathematical op 
---------------

s = {100,200,300}
#Read Set values

print(s[0])

Set - indexing and slicing is not possible.
TypeError: 'set' object is not subscriptable.

size = [38,40,42,44]
s = set(size)
print(s)
#we can create set objects using set() function.
#set() function - iterable object.

s2 = set(range(10))
print(s2)
s3 = {100,200,300,400}
print(s3)


--------------------------------------
set function:

add() - function
update() - To add multiple itesm 
copy() - return copy of set 

pop() - It removes some random element 
remove(x): It removes specified element 
discard(x):It removes specified element 

diff add() and update() 
-----------------------
we can use add() function to add individucal items 
update() function to add multiple items 

s = {100,200,300}
s.add(400)
s.update(range(10), [10,11,12])
print(s)
    
	
Sorted(set)
newSize = {46,42,38,44,40}
sorted(newSize,reverse=True)
print(newSize)


difference between remove() and discard()
pop() - It removes some random element 
remove(x): It removes specified element 

If  the specified element not present in set, we get key Error.
discard(x):It removes specified element 
If  the specified element not present in set, we wiil not get any Error.

s = {10,'Hello',20,True,30,'s'}
#s.remove(100)
s.discard(200)
print(s)


clear() - to remove all elements in the set .
s = {10,'Hello',20,True,30,'s'}


s.clear()
-----------------------------------------
Mathematical Operation on set 

union
intersection
difference
sematic_difference

a = {10,20,30,40}
b = {30,40,50,60}
print(a | b)
print(a.union(b))
print(b.union(a))

a.union(a) ---> We can use union() function to return all elements present in both sets

intersection -return common elements present in both sets

a = {10,20,30,40}
b = {30,40,50,60}
print(a & b)
print(a.intersection(b))
print(b.intersection(a))

Difference(): 

a = {10,20,30,40}
b = {30,40,50,60}
print(a - b)
print(a.difference(b))
print(b.difference(a))



a = {10,20,30,40}
b = {30,40,50,60}
print(a | b)  # union
print(a & b)  # intersection
print(a - b)  # difference
print(a ^ b)  #symetric differnce



Symmetric Defference :
Return elements present in either a or b . But not in both.

Membership operators
in 
not in 

s = {10,20,30}
print( 10 in s)
print(10 not in s)
print(100 in s)


======================================

dict:
If you want to represent group of key:value pair - dict.

Javascript - Object 
emp = { id:101, name:"Rahul Gandhi"}

Java - Map Object 
HashMap hm = new HashMap();


d = {key1:value1, key2:value2, keyn:valuen}
Duplicates keys are not allowed But values are allowed.

Heterogeneous Object are allowed for both key:value 
Insertion order  is not allowed.
Indexing and slicing in not applicable.

Dictionary/dict is multiple.
emp = {}
d = dict()

print(type(emp))
print(type(d))
print(emp)
print(d)

emp = {}
emp['id'] = 101
emp['name']='Rahul Gandhi'
emp['sal'] = 45000
print(emp)

d = {'user_Id':101}
print(d)


How to access data from dictionary?

#Read
#we can access data by using key

emp = { 'emp_id':101, 'emp_Name':'Rahul Gandhi'}
print(emp['emp_id'])
#print(emp.emp_id)
#AttributeError


If the specified key in not available then we will get keyError.

print(emp['sal']) #keyError



emp = { 'emp_id':101, 'emp_Name':'Rahul Gandhi'}
print(emp)
#how to update emp_Name
emp['emp_Name'] = "Priyanka Gandhi"
print(emp)

emp['sal'] = 55000

print(emp)


Note: If the key is not available then a new entry will be added.

if the key is already available then old value replaced by new value.

How to delete elments from dictionary?

using del keyword 

emp = { 'emp_id':101, 'emp_Name':'Rahul Gandhi'}
print(emp)
del emp['emp_id']
print(emp)



emp = { 'emp_id':101, 'emp_Name':'Rahul Gandhi'}
print(emp)
emp.clear()
print(emp)

#clear() - list, set, dict
#To remove all entries form the given sequence
#To remove all entries form the dictionay

emp = { 'emp_id':101, 'emp_Name':'Rahul Gandhi'}
print(emp)

emp.clear()

print(emp)
del emp   # To delete total dictonary object.
print(emp)#NameError: name 'emp' is not defined


Important funciton for Dictionary/dict

dict() # to create dictionary


emp = dict()
order = {}
d = dict({ 'emp_id':101, 'emp_Name':'Rahul Gandhi'})
print(d)
print(emp)
print(order)

len() 

d = dict({ 'emp_id':101, 'emp_Name':'Rahul Gandhi'})
print(len(d))

pop(key)  
popitem() 


num = {1:"One", 2:"Two", 3:"Three"}
value = num.popitem()
print(num)
print(value)


popitem() - it removes an entry from dictionary and return it. 


num = {1:"One", 2:"Two", 3:"Three"}
#print(type(num.keys()))
for key in num.keys():
    print(key)
    
for value in num.values():
    print(value)
    
#print(num.values())

keys() - It return all keys form dictionay
values() - It return all values form dictionary.

emp = { 'emp_id':101, 'emp_Name':'Rahul Gandhi', 'sal':45000}

print(type(emp.items()))

for k,v in emp.items():
    print(k,":",v)
	
items() - it return list of tuples as k:v from dictionary object.


keys()
values()
items() 

copy() - To create exactly duplicate dict object 

get()

emp ={ 'emp_id':101, 'emp_Name':'Rahul Gandhi'}
print(emp.get('emp_id'))
print(emp['emp_id'])

print(emp.get('sal', 45000))


List of funcitons - dictionary

len()
dict()

clear()
pop()
popitem()

get()
copy()

keys()
values()
items()


==================================
Functions
What is function?

-group of statement for specifc task/operation.

-group of statements as single unit and we can call number of times
based on our requirement.

The main advantages of function - code reusability.

Pyton supportin 2 types of functions.
1.Built-in function.
2.User Defined function.

Built-in function:
Pyton software 
which are coming from python software automatically

User Defined Functions:

Syntax:

def funciton_name(parameters):
	statement1
	statement2
	statement3


funciton_name(argument)

def - keyword : mandatory 
return - optional

Parameters:
parameters are input to funciton.

def add(a,b):
    print(a+b)

add(10,20)   # 30
add(200,300) # 500

def greet(msg):
    print(msg)

greet("Good Morning")


 
def squereEx(number):
    print(number*number)
    
squereEx(4)



4 Types of argument.

positional argument?
keyword argument
default agrument
variable length argument


def sub(a,b):
    print(a-b)

sub(10,20)  # -10 

sub(20,10)  # 10 

If we change the order then result may be changed.


keyword arguments
We can pass agrument valeus by keywords ie by parameters name.

Order of arguments is not imp but number of argument must be matched

def greet(name,message):
    print("Hello,", name,message)

greet(name="Rahul Gandhi",message="GM")
greet(message="GM",name="Rahul Gandhi")


default Argument

def greet(name="politician"):
	print(name)
	
greet()
greet("Rahul")

- some times we can provide default values for our positional arguments.



def greet(id,name="politician"):
	print(id,name)
	
greet(101)
greet(101,"Rahul")



Note: After default agrument we should not take non-default agrument.



variable length agruments(*)


def sum(*n):
	print(n)

	
sum()
sum(10)
sum(10,20)
sum(10,20,30)
sum(10,20,30,40)

'''
()
(10,)
(10, 20)
(10, 20, 30)
(10, 20, 30, 40)
'''

we can declare variable length agrument with * symbol.
	
sum()
sum(10)
sum(10,20)
sum(10,20,30)
sum(10,20,30,40)



variables

Global 
Local 

Global Variable:

The variable which are declared outside of functins
These variable can be accessed in all functions of the module.




Python Functions 
-----------------
anonymous functions/nameless

Normal function.

def add():
	pass
	
Javascript - nameless

lambda function 
----------------
we can define by using lambda keyword 


lambda list_agrs : expression 

lambda n : n+1 

lambda a,b: a+b 

def add(a,b):
	return a+b
	
# def add(a,b):
#     return a+b
# print(add(10,20))
#
# add = lambda a : a+1
# print(add(10))

# s =lambda  n : n*n
# print(s(10))

def s(n):
    return n*n

print(s(10))

By using lambda functions we can write very shorter/concise code.
we are improving readability of code.

nameless/anonymous/lambda function.

dummy = lambda a,b,c: a+b+c+100 

result = dummy(10,20,30)


map() function :

for every element present in list/given sequence, apply some funcitonality and generate new list with required modifications.

map(function, sequence)

map(lambda a:a+1, [1,2,3,4])
list(map(lambda a:a+1, [1,2,3,4]))
print(list(map(lambda a:a+1, [1,2,3,4])))


map() - to iterate list, and execute function.
every iteration executing one function.

map(funcition, sequence)

filter(function,sequence)
[1,2,3,4,5,6,7,8,9,10]
print - only add number 
def odd_number():
    
filter() - funcition to  filter values from given sequence based on condiftion.

filter(1,2)
filter(fun, sequence)
map()
reduce()
--------------------------------------

